define inRange(s,i) 0 <= i && i < len(s)

// Encoding ordered sequences of Ints.
domain OrdSeq {
  function lookup(s: OrdSeq, i: Int): Int
  function len(s: OrdSeq): Int

  axiom length_nonneg {
    forall s: OrdSeq :: {len(s)} len(s) >= 0
  }
  axiom ordered {
    forall s: OrdSeq, i: Int, j: Int :: {lookup(s,i), lookup(s,j)}
      inRange(s,i) && inRange(s,j) && i < j ==> lookup(s,i) < lookup(s,j)
  }
}

method binary_search(s: OrdSeq, key: Int) returns (index: Int)
  ensures -1 <= index && index <= len(s)
  ensures index >= 0 ==> lookup(s, index) == key
  ensures index == -1 ==> forall i: Int :: {lookup(s,i)} inRange(s,i) ==> lookup(s,i) != key

{
  var upper: Int := len(s)
  var lower: Int := 0
  index := -1
  while (lower < upper && index == -1)
    invariant lower >= 0 && upper <= len(s) && lower <= upper
    invariant -1 <= index && index <= len(s)
    invariant index == -1 ==> forall i: Int :: {lookup(s,i)} inRange(s,i) && i < lower && i >= upper ==> lookup(s,i) != key
    // invariant index == -1 && lower >= upper ==> forall i: Int :: {lookup(s,i)} inRange(s,i) ==> lookup(s,i) != key
    invariant index >= 0 ==> lookup(s, index) == key
  {
    var middle: Int := (lower + upper) \ 2
    if (lookup(s, middle) < key) {
      lower := middle + 1
    } else {
      if (lookup(s, middle) == key) {
        index := middle
        upper := middle
      } else { // lookup(s, middle) > key
        upper := middle
      }
    }
  }
}
