// partial implementation of an integer set
domain IntSet {
    function init(): IntSet

    function add(s:IntSet, e:Int): IntSet
    axiom orderDoesntMatterAx {
        forall s:IntSet, e1:Int, e2:Int ::
            {add(s, e1)}
        add(add(s, e1), e2) == add(add(s, e2), e1)
    }

    function hasElem(s:IntSet, e:Int): Bool
    axiom hasElemAxBase {
        forall s:IntSet, e:Int ::
        !hasElem(init(), e)
    }
    axiom hasElemAx {
        forall s1:IntSet, s2:IntSet, e:Int ::
            {hasElem(s1, e)}
            {add(s2, e)}
        s1 == add(s2, e) ? hasElem(s1, e) : !hasElem(s1, e)
    }
}

method hasElemTest() {
    var s: IntSet := init()
    assert !hasElem(s, 1)
    s := add(s, 1)
    assert hasElem(s, 1)
}

method orderDoesntMatter() {
    var s1: IntSet := init()
    var s2: IntSet := init()
    s1 := add(add(s1, 1), 2)
    s2 := add(add(s2, 2), 1)
    assert s1 == s2
}
