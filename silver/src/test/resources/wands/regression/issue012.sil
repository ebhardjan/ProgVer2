field next: Ref;

predicate P(x: Ref) {acc(x.next) && acc(x.next.next)}
predicate Q(x: Ref) {acc(x.next)}

method test1(l: Ref)
{
  package acc(P(l)) --* unfolding P(l) in folding Q(l.next) in acc(l.next) && acc(Q(l.next))
}

method test2(l: Ref)
  requires l != null
  requires true --* acc(l.next) && acc(Q(l.next))
{
  package
    true
      --*
    applying
      (true --* acc(l.next) && acc(Q(l.next)))
    in
      unfolding acc(Q(l.next))
    in acc(l.next) && acc(l.next.next)
}

method test3(l: Ref)
  requires acc(l.next) && acc(l.next.next) --* acc(l.next) && acc(Q(l.next))
{
  package
    acc(P(l))
      --*
    unfolding P(l)
    in applying (acc(l.next) && acc(l.next.next) --* acc(l.next) && acc(Q(l.next)))
    in acc(l.next) && acc(Q(l.next))
}
