field f: Int

method t01(x:Ref,y:Ref)
  requires acc(x.f)
  requires acc(y.f)
{
  package acc(x.f) --* acc(x.f)&&acc(x.f)&&acc(y.f)

  //since inconsistency is noticed before transferring permission to y.f from the state before the package,
  //the verifier can notice that no permission has to be removed from that state to y.f

  //:: UnexpectedOutput(exhale.failed:insufficient.permission, /silicon/issue/188/)
  exhale acc(y.f)

  //:: ExpectedOutput(assert.failed:assertion.false)
  //:: MissingOutput(assert.failed:assertion.false, /silicon/issue/34/)
  assert false
}

method t02(x:Ref,y:Ref)
  requires acc(x.f,1/3)
{
  package acc(x.f,1/3)&&x.f==2 --* packaging (acc(x.f,1/3)&&x.f==3 --* acc(x.f)&&false) in true

  //since inconsistency is noticed before transferring permission from the state before the package,
  //the verifier can notice that no permission has to be removed from that state

  //:: UnexpectedOutput(exhale.failed:insufficient.permission, /silicon/issue/188/)
  exhale acc(x.f,1/3)

  //:: ExpectedOutput(assert.failed:assertion.false)
  //:: MissingOutput(assert.failed:assertion.false, /silicon/issue/34/)
  assert false
}
