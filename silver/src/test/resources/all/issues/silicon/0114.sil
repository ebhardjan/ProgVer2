field f: Int

function fun1(j: Int): Int { 10 }

predicate P(x: Ref, b: Bool) { b ==> acc(x.f) }

method test01(x: Ref, b: Bool, c: Bool)
  requires acc(P(x, c))
{
  assert forall j: Int :: fun1(j) > 0
  assert forall j: Int :: false ? true : fun1(j) > 0
  assert forall j: Int :: b ? fun1(j) > 5 : fun1(j) > 0

  assert forall j: Int :: true ==> fun1(j) > 0
  assert forall j: Int :: b ==> fun1(j) > 0

  /* Malte to fix / add issue number */
  //:: UnexpectedOutput(assert.failed:assertion.false, /silicon/issue/000/)
  assert forall j: Int :: unfolding acc(P(x, c)) in fun1(j) > 0

  //:: MissingOutput(assert.failed:assertion.false, /silicon/issue/000/)
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}
