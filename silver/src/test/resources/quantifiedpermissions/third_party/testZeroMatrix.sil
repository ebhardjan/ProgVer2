field Ref__Integer_value: Int

function sum_list(i: Int, hi: Int, ar: Seq[Int]): Int
  requires (0 <= i) && (i <= hi)
  requires hi <= |ar|
{
  (i < hi ? ar[i] + sum_list(i + 1, hi, ar) : 0)
}

function sum_array(i: Int, lo: Int, hi: Int, ar: Seq[Ref]): Int
  requires (0 <= lo) && (lo <= i) && (i <= hi)
  requires (forall k: Int :: (k in [lo..hi)) ==> acc(ar[k].Ref__Integer_value, wildcard))
{
  (i < hi ? ar[i].Ref__Integer_value + sum_array(i + 1, lo, hi, ar) : 0)
}

function sum_square(i: Int, lo: Int, hi: Int, step: Int, min: Int, max: Int, ar: Seq[Ref]): Int
  requires (0 <= lo) && (lo <= hi) && (hi <= step) && (step > 0)
  requires (0 <= min) && (min <= i) && (i <= max)
  requires (forall k: Int :: (min <= k) && (k < max) && (lo <= k % step) && (k % step < hi) ==> acc(ar[k].Ref__Integer_value, wildcard))
{
  (i < max ? ((lo <= i % step) && (i % step < hi) ? ar[i].Ref__Integer_value : 0) + sum_square(i + 1, lo, hi, step, min, max, ar) : 0)
}

function count_square(i: Int, lo: Int, hi: Int, step: Int, min: Int, max: Int, ar: Seq[Ref], v: Int): Int
  requires (0 <= lo) && (lo <= hi) && (hi <= step) && (step > 0)
  requires (0 <= min) && (min <= i) && (i <= max)
  requires (forall k: Int :: (min <= k) && (k < max) && (lo <= k % step) && (k % step < hi) ==> acc(ar[k].Ref__Integer_value, wildcard))
{
  (i < max ? ((lo <= i % step) && (i % step < hi) && (ar[i].Ref__Integer_value == v) ? 1 : 0) + count_square(i + 1, lo, hi, step, min, max, ar, v) : 0)
}

function count_list(i: Int, hi: Int, ar: Seq[Int], v: Int): Int
  requires (0 <= i) && (i <= hi)
  requires hi <= |ar|
{
  (i < hi ? (ar[i] == v ? 1 : 0) + count_list(i + 1, hi, ar, v) : 0)
}

function count_array(i: Int, hi: Int, ar: Seq[Ref], v: Int): Int
  requires (0 <= i) && (i <= hi)
  requires (forall k: Int :: (k in [0..hi)) ==> acc(ar[k].Ref__Integer_value, wildcard))
{
  (i < hi ? (ar[i].Ref__Integer_value == v ? 1 : 0) + count_array(i + 1, hi, ar, v) : 0)
}

method Ref__loop_main_35(diz: Ref, matrix: Seq[Ref], N: Int, M: Int)
  requires diz != null
  requires (forall j: Int :: (j in [0..M * N)) ==> acc(matrix[j].Ref__Integer_value, write))
  ensures (forall j: Int :: (j in [0..M * N)) ==> acc(matrix[j].Ref__Integer_value, write))
  ensures (forall j: Int :: (j in [0..M * N)) ==> (matrix[j].Ref__Integer_value == 0))
{
  inhale false
}

method Ref__loop_body_35(diz: Ref, matrix: Seq[Ref], j: Int, i: Int, N: Int, M: Int)
  requires diz != null
  requires (i in [0..M)) && (j in [0..N))
  requires acc(matrix[i * N + j].Ref__Integer_value, write)
  ensures (i in [0..M)) && (j in [0..N))
  ensures acc(matrix[i * N + j].Ref__Integer_value, write)
  ensures matrix[i * N + j].Ref__Integer_value == 0
{
  var __flatten_2: Ref
  __flatten_2 := matrix[i * N + j]
  __flatten_2.Ref__Integer_value := 0
  assert M * N > 0
}

method Ref__zero(diz: Ref, M: Int, N: Int, matrix: Seq[Ref])
  requires diz != null
  requires (M > 0) && (N > 0)
  requires (forall j1: Int :: (j1 in [0..M * N)) ==> acc(matrix[j1].Ref__Integer_value, write))
  ensures (forall j2: Int :: (j2 in [0..M * N)) ==> acc(matrix[j2].Ref__Integer_value, write))
  ensures (forall j3: Int :: (j3 in [0..M * N)) ==> (matrix[j3].Ref__Integer_value == 0))
{
  Ref__loop_main_35(diz, matrix, N, M)
}