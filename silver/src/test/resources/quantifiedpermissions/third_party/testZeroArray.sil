field Ref__Integer_value: Int

function sum_list(i: Int, hi: Int, ar: Seq[Int]): Int
  requires (0 <= i) && (i <= hi)
  requires hi <= |ar|
{
  (i < hi ? ar[i] + sum_list(i + 1, hi, ar) : 0)
}

function sum_array(i: Int, lo: Int, hi: Int, ar: Seq[Ref]): Int
  requires (0 <= lo) && (lo <= i) && (i <= hi)
  requires (forall k: Int :: (k in [lo..hi)) ==> acc(ar[k].Ref__Integer_value, wildcard))
{
  (i < hi ? ar[i].Ref__Integer_value + sum_array(i + 1, lo, hi, ar) : 0)
}

function sum_square(i: Int, lo: Int, hi: Int, step: Int, min: Int, max: Int, ar: Seq[Ref]): Int
  requires (0 <= lo) && (lo <= hi) && (hi <= step) && (step > 0)
  requires (0 <= min) && (min <= i) && (i <= max)
  requires (forall k: Int :: (min <= k) && (k < max) && (lo <= k % step) && (k % step < hi) ==> acc(ar[k].Ref__Integer_value, wildcard))
{
  (i < max ? ((lo <= i % step) && (i % step < hi) ? ar[i].Ref__Integer_value : 0) + sum_square(i + 1, lo, hi, step, min, max, ar) : 0)
}

function count_square(i: Int, lo: Int, hi: Int, step: Int, min: Int, max: Int, ar: Seq[Ref], v: Int): Int
  requires (0 <= lo) && (lo <= hi) && (hi <= step) && (step > 0)
  requires (0 <= min) && (min <= i) && (i <= max)
  requires (forall k: Int :: (min <= k) && (k < max) && (lo <= k % step) && (k % step < hi) ==> acc(ar[k].Ref__Integer_value, wildcard))
{
  (i < max ? ((lo <= i % step) && (i % step < hi) && (ar[i].Ref__Integer_value == v) ? 1 : 0) + count_square(i + 1, lo, hi, step, min, max, ar, v) : 0)
}

function count_list(i: Int, hi: Int, ar: Seq[Int], v: Int): Int
  requires (0 <= i) && (i <= hi)
  requires hi <= |ar|
{
  (i < hi ? (ar[i] == v ? 1 : 0) + count_list(i + 1, hi, ar, v) : 0)
}

function count_array(i: Int, hi: Int, ar: Seq[Ref], v: Int): Int
  requires (0 <= i) && (i <= hi)
  requires (forall k: Int :: (k in [0..hi)) ==> acc(ar[k].Ref__Integer_value, wildcard))
{
  (i < hi ? (ar[i].Ref__Integer_value == v ? 1 : 0) + count_array(i + 1, hi, ar, v) : 0)
}

method Ref__loop_main_23(diz: Ref, len: Int, ar: Seq[Ref])
  requires diz != null
  requires (0 < len) ==> (|ar| == len)
  requires (forall i: Int :: (i in [0..len)) ==> acc(ar[i].Ref__Integer_value, write))
  ensures (0 < len) ==> (|ar| == len)
  ensures (forall i: Int :: (i in [0..len)) ==> acc(ar[i].Ref__Integer_value, write))
  ensures (forall i: Int :: (i in [0..len)) ==> (ar[i].Ref__Integer_value == 0))
{
  inhale false
}

method Ref__loop_body_23(diz: Ref, len: Int, ar: Seq[Ref], i: Int)
  requires diz != null
  requires (i in [0..len))
  requires |ar| == len
  requires acc(ar[i].Ref__Integer_value, write)
  ensures (i in [0..len))
  ensures |ar| == len
  ensures acc(ar[i].Ref__Integer_value, write)
  ensures ar[i].Ref__Integer_value == 0
{
  var __flatten_2: Ref
  __flatten_2 := ar[i]
  __flatten_2.Ref__Integer_value := 0
}

method Ref__zero_array(diz: Ref, ar: Seq[Ref], len: Int)
  requires diz != null
  requires |ar| == len
  requires (forall i: Int :: (i in [0..len)) ==> acc(ar[i].Ref__Integer_value, write))
  ensures |ar| == len
  ensures (forall i: Int :: (i in [0..len)) ==> acc(ar[i].Ref__Integer_value, write))
  ensures (forall k: Int :: (k in [0..len)) ==> (ar[k].Ref__Integer_value == 0))
{
  assert |ar| == len
  Ref__loop_main_23(diz, len, ar)
}